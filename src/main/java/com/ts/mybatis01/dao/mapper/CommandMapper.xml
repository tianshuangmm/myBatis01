<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--命名空间-->
<mapper namespace="Command">

  <resultMap type="com.ts.mybatis01.bean.Command" id="CommandResult">
    <!--column 数据库中的字段名，property java对应得属性名，id为主键-->
    <id column="id" jdbcType="INTEGER" property="id"/>
    <result column="name" jdbcType="VARCHAR" property="name"/>
    <result column="description" jdbcType="VARCHAR" property="description"/>
    <collection property="contents" resultMap="CommandContent.contentResult"/>
  </resultMap>


  <!--resultMap的值对应id唯一-->
  <select id="queryMessageList" parameterType="com.ts.mybatis01.bean.Message" resultMap="MessageResult">
    SELECT ID,COMMAND,DESCRIPTION,CONTENT FROM Message WHERE 1=1
    <if test="command!=null and !''.equals(command.trim()) ">
      and  command = '${command}'
    </if>
    <if test="content!=null and !''.equals(content.trim()) ">
      and  content like  '%${content}%'
    </if>
  </select>
  <!--这两个都可以 delete from message where id = ${_prarmeter}-->
  <delete id="delete" parameterType="String">
    delete from message where id = #{id}
  </delete>
  <delete id="deleteBatch" parameterType="java.util.List">
    delete from message where id in (
     <foreach collection="list" item="item" separator=",">
       #{item}
     </foreach>
    )
  </delete>
  <!--<select id="version" parameterType="long" resultType="int">
    SELECT version FROM user WHERE id = #{id,jdbcType=INTEGER}
  </select>

  <delete id="delete" parameterType="UserAlias">
    DELETE FROM user WHERE id = #{id:INTEGER}
  </delete>

  <insert id="insert" parameterType="UserAlias" useGeneratedKeys="false">
    INSERT INTO user
    ( id,
    username,
    password,
    administrator
    )
    VALUES
    ( #{id},
    #{username,jdbcType=VARCHAR},
    #{password.encrypted:VARCHAR},
    #{administrator,jdbcType=BOOLEAN}
    )
  </insert>

  <update id="update" parameterType="UserAlias">
    UPDATE user SET
    username = #{username,jdbcType=VARCHAR},
    password = #{password.encrypted,jdbcType=VARCHAR},
    administrator = #{administrator,jdbcType=BOOLEAN}
    WHERE
    id = #{id,jdbcType=INTEGER}
  </update>

  &lt;!&ndash;   Unique constraint check &ndash;&gt;
  <select id="isUniqueUsername" parameterType="map" resultType="boolean">
    SELECT (count(*) = 0)
    FROM user
    WHERE ((#{userId,jdbcType=BIGINT} IS NOT NULL AND id != #{userId,jdbcType=BIGINT}) OR #{userId,jdbcType=BIGINT} IS
    NULL)  &lt;!&ndash; other than me &ndash;&gt;
    AND (username = #{username,jdbcType=VARCHAR})
  </select>-->
</mapper>
